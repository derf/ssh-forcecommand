#!/usr/bin/env perl

my $VERSION = '1.0';

use strict;
use warnings;
use autodie qw(exec);

use Config::Tiny;

my $conffile = shift or die("Usage: $0 <configfile>\n");
my $input = $ENV{SSH_ORIGINAL_COMMAND} or die("No command\n");;

my $conf = Config::Tiny->read($conffile)
  or die "Cannot open $conffile: " . Config::Tiny->errstr() . "\n";
my %command = %{ $conf->{_} };

if ($command{$input}) {
	exec($command{$input});
}

die("Unknown command\n");

__END__

=head1 NAME

ssh-forcecommand - Whitelist remote commands via ssh config

=head1 SYNOPSIS

In .ssh/authorized_keys:

    command="/usr/local/lib/ssh-forcecommand /etc/forcecommand/backup",no-agent-forwarding,no-port-
    forwarding,no-pty,no-X11-forwarding $key

=head1 VERSION

This is B<ssh-forcecommand> version 1.0

=head1 DESCRIPTION

B<ssh-forcecommand> is a trivial script to safely execute remote commands via
ssh.  It is especially aimed at automated remote commands (in which ssh keys
are not secured via password), where a compromise of the remote system could
also compromise the local system.

To prevent this, you can invoke ssh-forcecommand through the ssh
configuration, which will limit the romet system so that it can only execute a
set of statically defined commands. This way, compromising the local system is
made much more diffecult.

=head1 CONFIGURATION

For every public key you want to restrict to the forcecommand, add a line like
in SYNOPSIS to the F<.ssh/authorized_keys>.

command="..." sets the forcecommand, the other options disable potentially
dangerous stuff like port forwardig (Though that is not meant to be an
exhaustive list).

As you see, the forcecommand accepts exactly one argument, which is the config
defining the allowed commands.  This way, you can restrict different ssh keys
to different sets of commands.  A few example configs are provided with this
script, see the examples directory.

=head1 USAGE

Assume you have the following line in your forcecommand config:

    home = tar -C / -cf - home

Now, on the remote system, run this:

    ssh user@yourhost home

On your system, this will translate to:

    tar -C / -cf - home

The forcecommand is 100% static, variables or appending of stuff is not
supported.  No part of the original ssh command will be dynamically used in
the resulting command.  This makes ssh-forcecommand quite secure.

=head1 AUTHOR

Copyright (C) 2010,2011 by Daniel Friesel E<lt>derf@finalrewind.orgE<gt>

=head1 LICENSE

  0. You just DO WHAT THE FUCK YOU WANT TO.
